# -*- coding: utf-8 -*-
"""japan_earthquake_2000_to_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19vq9HwDuap5hWB2Hce6oGQRwoBnsUjYs
"""

import os
import numpy as np
import pandas as pd
import folium
from folium import plugins
import seaborn as sns
import matplotlib.pyplot as plt

# READ THE COMMA SEPERATED FILE OF EARTHQUAKE IN JAPAN 1900-2023 THROUGH PANDAS LIBRARY

data0 = pd.read_csv('/content/japan_earthquake_2000_2023.csv')
display(data0.head())

# This code provide information about following:
# The total number of entries (rows).
# The number of non-null values for each column.
# The data type of each column.
# The memory usage of the DataFrame.

data0.info()

# Code selecting the first five columns from dataframe and creating a new dataframe named as data1.
data1 = data0[data0.columns[0:5]]
print(data1)

# This code extracting the values from the 'time' column of the DataFrame data1 and converting them into a Python list.
a = data1['time'].tolist()
print(a)

# The provided code is a loop that iterates over each element i in the list a, converts each element to a string,
# and then appends a substring of characters from index 6 to 9 (excluding index 10) to the list B. The result is that B will contain the extracted substrings from each element in the list 'a'.
B = []
for i in a:
    B.append(str(i)[0:4])
print(B)

# adds a new column named 'year' to the DataFrame data1
data1['year']=B

# isnull() is a method that,returns a DataFrame of the same shape as data1 with Boolean values indicating whether each element is a null/missing value (True) or not (False).

data1.isnull().sum()

# fliter the 2022 data

data7_2022=data1[data1['year']=='2022']
print(data7_2022)

# filter the 2023 data

data8_2023=data1[data1['year']=='2023']

# filter the maximum and minimum value of year 2022

data7_2022_min=data7_2022['mag'].min()
data7_2022_max=data7_2022['mag'].max()
print(data7_2022_min)
print(data7_2022_max)

# filter the maximum and minimum value of year 2023

data8_2023_min=data8_2023['mag'].min()
data8_2023_max=data8_2023['mag'].max()

data7_2022_min

data7_2022_max

data8_2023_min

data8_2023_max

# timelist extract the value of time, latlist extract the value of latitude, lonlist extracting the value of longitude, maglist extracting the value of magnitude and yearlist extracting value of the year.
timelist = data1['time'].tolist()
latlist = data1['latitude'].tolist()
lonlist = data1['longitude'].tolist()
maglist = data1['mag'].tolist()
yearlist = data1['year'].tolist()
print(yearlist)

print(len(yearlist))

main_list = []

for q,w,e,r,t in zip (timelist[1:],latlist[1:],lonlist[1:],maglist[1:],yearlist[1:]):
  main_list.append([q,w,e,r,t])

len(main_list)

new_datelist_min_2022 = []
new_latlist_min_2022  = []
new_lonlist_min_2022  = []
new_maglist_min_2022  = []
new_yearlist_min_2022  = []

for h in main_list:
  # print(type(h[-1]))
  if h[-1] == '2022' and h[-2] == data7_2022_min:   # min and max value change
    new_datelist_min_2022.append(h[0][0:10])
    new_latlist_min_2022.append(h[1])
    new_lonlist_min_2022.append(h[2])
    new_maglist_min_2022.append(h[3])
    new_yearlist_min_2022.append(h[4])

min_2022_df = pd.DataFrame({'time':new_datelist_min_2022 ,
               'lat' :new_latlist_min_2022 ,
               'lon' : new_lonlist_min_2022 ,
               'mag' : new_maglist_min_2022 ,
               'year' : new_yearlist_min_2022 })

# print the value what we extract from previous dataframe.

min_2022_df

# Creating a new list for store the value of 2022 maximum magnitude

new_datelist_max = []
new_latlist_max = []
new_lonlist_max = []
new_maglist_max = []
new_yearlist_max = []

# Append the value of previously defined list

for i in main_list:
  if i[-1] == '2022' and i[-2] == data7_2022_max:   # min and max value change
    new_datelist_max.append(i[0][0:10])
    new_latlist_max.append(i[1])
    new_lonlist_max.append(i[2])
    new_maglist_max.append(i[3])
    new_yearlist_max.append(i[4])

# Store the value in new datafarme named as max_2022_df

max_2022_df = pd.DataFrame({'time':new_datelist_max,
               'lat' :new_latlist_max,
               'lon' : new_lonlist_max,
               'mag' : new_maglist_max,
               'year' : new_yearlist_max})

# print the maximum value of mangnitude in the year of 2022

max_2022_df

# Using matplotlib and seaborn to create a scatter plot.
# This Code provide for visualizing earthquake data for the year 2022, where the x-axis represents 'latitude,' the y-axis represents 'longitude,' and the color of the points is determined by the 'depth' of the earthquakes.

plt.figure(figsize=(16, 8))
sns.scatterplot(data=data7_2022, x='latitude', y='longitude',hue="depth")
plt.title('Depth of Earthquake')
plt.show()

# Using matplotlib and seaborn to create a scatter plot.
# This Code provide for visualizing earthquake data for the year 2023, where the x-axis represents 'latitude,' the y-axis represents 'longitude,' and the color of the points is determined by the 'depth' of the earthquakes.


plt.figure(figsize=(16, 8))
sns.scatterplot(data=data8_2023, x='latitude', y='longitude',hue="depth")
plt.title('Depth of Earthquake')
plt.show()

# This code creates a 3D scatter plot where each point is positioned based on latitude, longitude, and magnitude, and the color represents the magnitude of the year 2022

x = min_2022_df ['lat']
y = min_2022_df ['lon']
z = min_2022_df ['mag']

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
scatter = ax.scatter(x, y, z, c=z, cmap='viridis')
cbar = fig.colorbar(scatter, ax=ax, orientation='vertical')
cbar.set_label('mag')
fig.subplots_adjust(right=2)
ax.set_xlabel('Latitude')
ax.set_ylabel('Longitude')
ax.set_zlabel('Magnitude')
plt.show()

#Extract lat and long:
data1a=data1[['latitude','longitude']]
display(data1a)

# This HeatMap provide the intensity of earthquake occurrences in a geographic region of perticular location

eq_map = folium.Map(location=[37.7132,	141.5793],tiles='OpenStreetMap',zoom_start=5.0,min_zoom=2.0)
eq_map.add_child(plugins.HeatMap(data1a))
eq_map
# in 2022 at this location record highest magnitude which is 7.3.

# Creating the new list for storing the value of

new_datelist_min_2023 = []
new_latlist_min_2023 = []
new_lonlist_min_2023 = []
new_maglist_min_2023 = []
new_yearlist_min_2023 = []

# Append the value of previously defined list

for i in main_list:
  if i[-1] == '2023' and i[-2] == data8_2023_min:   # min and max value change
    new_datelist_min_2023.append(i[0][0:10])
    new_latlist_min_2023.append(i[1])
    new_lonlist_min_2023.append(i[2])
    new_maglist_min_2023.append(i[3])
    new_yearlist_min_2023.append(i[4])

# Store the value in new datafarme named as min_2023_df

min_2023_df = pd.DataFrame({'time':new_datelist_min_2023,
               'lat' :new_latlist_min_2023,
               'lon' : new_lonlist_min_2023,
               'mag' : new_maglist_min_2023,
               'year' : new_yearlist_min_2023})

# print the value of minimum magnitude value of 2023

min_2023_df

# This code creates a 3D scatter plot where each point is positioned based on latitude, longitude, and magnitude, and the color represents the magnitude of the year 202

x = min_2023_df ['lat']
y = min_2023_df ['lon']
z = min_2023_df ['mag']

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
scatter = ax.scatter(x, y, z, c=z, cmap='viridis')
cbar = fig.colorbar(scatter, ax=ax, orientation='vertical')
cbar.set_label('mag')
fig.subplots_adjust(right=2)
ax.set_xlabel('Latitude')
ax.set_ylabel('Longitude')
ax.set_zlabel('Magnitude')
plt.show()

# Creating a new list for storing the maximum value of magnitude of the year 2023

new_datelist_max_2023 = []
new_latlist_max_2023 = []
new_lonlist_max_2023 = []
new_maglist_max_2023 = []
new_yearlist_max_2023 = []

# Append the value of previously defined list

for i in main_list:
  if i[-1] == '2023' and i[-2] == data8_2023_max:   # min and max value change
    new_datelist_max_2023.append(i[0][0:10])
    new_latlist_max_2023.append(i[1])
    new_lonlist_max_2023.append(i[2])
    new_maglist_max_2023.append(i[3])
    new_yearlist_max_2023.append(i[4])

# Store the value in new datafarme named as max_2023_df


max_2023_df = pd.DataFrame({'time':new_datelist_max_2023,
               'lat' :new_latlist_max_2023,
               'lon' : new_lonlist_max_2023,
               'mag' : new_maglist_max_2023,
               'year' : new_yearlist_max_2023})

# print the maximum value of magnitude of earthquake in the year of 2023

max_2023_df

# This HeatMap provide the intensity of earthquake occurrences in a geographic region of perticular location

eq_map = folium.Map(location=[28.9804,	139.3452],tiles='OpenStreetMap',zoom_start=5.0,min_zoom=2.0)
eq_map.add_child(plugins.HeatMap(data1a))
eq_map
# in 2023 at this location record highest magnitude which is 6.3.

# extracting the maximum value of magnitude of the year 2023

data_2022 = {'time': ['16-01-2023'],
        'lat': [28.9804],
        'lon': [139.3452],
        'mag': [6.3],
        'year': [2023]}

df = pd.DataFrame(data_2022)

# Extracting only "mag" and "year" columns
selected_columns = df[['mag', 'year']]

# Displaying the result
print(selected_columns)

# extracting the maximum value of magnitude of the year 2022

data_2023 = {'time': ['16-03-2022'],
        'lat': [37.7132],
        'lon': [141.5793],
        'mag': [7.3],
        'year': [2022]}

df = pd.DataFrame(data_2023)

# Extracting only "mag" and "year" columns
selected_columns = df[['mag', 'year']]

# Displaying the result
print(selected_columns)

# creating the combined dataframe for further purpose

df_2022 = pd.DataFrame(data_2022)
df_2023 = pd.DataFrame(data_2023)

# Concatenate the two data frames
combined_df = pd.concat([df_2022, df_2023], ignore_index=True)

# Extracting only "mag" and "year" columns
selected_columns = combined_df[['mag', 'year']]

# Displaying the result
print(selected_columns)

# creating barchart for visualize the magnitude in which year magnitude of earthquake is highest.

data = (selected_columns)

df = pd.DataFrame(data)

# Extracting only "mag" and "year" columns
selected_columns = df[['mag', 'year']]

# Plotting a bar chart
selected_columns.plot(kind='bar', x='year', y='mag',color = 'cyan', legend=True,)
plt.title('Magnitude by Year')
plt.xlabel('Year')
plt.ylabel('Magnitude')
plt.show()